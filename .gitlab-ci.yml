# From: https://java.testcontainers.org/supported_docker_environment/continuous_integration/gitlab_ci/
# DinD service is required for Testcontainers
#services:
#  - name: docker:dind
#    # explicitly disable tls to avoid docker startup interruption
#    command: ["--tls=false"]
#
#variables:
#  # Instruct Testcontainers to use the daemon of DinD, use port 2375 for non-tls connections.
#  DOCKER_HOST: "tcp://docker:2375"
#  # Instruct Docker not to start over TLS.
#  DOCKER_TLS_CERTDIR: ""
#  # Improve performance with overlayfs.
#  DOCKER_DRIVER: overlay2

# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Maven.gitlab-ci.yml

# Build JAVA applications using Apache Maven (http://maven.apache.org)
# For docker image tags see https://hub.docker.com/_/maven/
#
# For general lifecycle information see https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html

# This template will build and test your projects
# * Caches downloaded dependencies and plugins between invocation.
# * Verify but don't deploy merge requests.
# * Deploy built artifacts from master branch only.
variables:

  MAVEN_REPO_DIR: $CI_PROJECT_DIR/.m2/repository

  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: >-
    -Dhttps.protocols=TLSv1.2
    -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository
    -Dorg.slf4j.simpleLogger.showDateTime=true
    -Djava.awt.headless=true

  # As of Maven 3.3.0 instead of this you MAY define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # As of Maven 3.6.1, the use of `--no-tranfer-progress` (or `-ntp`) suppresses download and upload messages. The use
  # of the `Slf4jMavenTransferListener` is no longer necessary.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: >-
    --batch-mode
    --errors
    --fail-at-end
    --show-version
    --no-transfer-progress
#    -DinstallAtEnd=true
#    -DdeployAtEnd=true

  # Specify the timezone - used by date tests
  TZ: "Europe/Brussels"
  # Specify a language - used by LocaleContextHolder
  LANG: "en_US.UTF-8"

  ORACLE_INIT_SQL: |
    CREATE USER axt IDENTIFIED BY across_test;
    GRANT CONNECT, RESOURCE TO axt;
    GRANT CREATE SESSION, GRANT ANY PRIVILEGE TO axt;
    GRANT UNLIMITED TABLESPACE TO axt;
    GRANT SELECT ON SYS.DBA_RECYCLEBIN TO AXT;


# This template uses the latest Maven 3 release, e.g., 3.8.6, and OpenJDK 8 (LTS)
# for verifying and deploying images
# Maven 3.8.x REQUIRES HTTPS repositories.
# See https://maven.apache.org/docs/3.8.1/release-notes.html#how-to-fix-when-i-get-a-http-repository-blocked for more.
image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/maven:3.8-eclipse-temurin-8

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
# Be aware that `mvn deploy` will install the built jar into this repository. If you notice your cache size
# increasing, consider adding `-Dmaven.install.skip=true` to `MAVEN_OPTS` or in `.mvn/maven.config`
cache:
  paths:
    - $MAVEN_REPO_DIR

# Required by frontend-maven-plugin, which already slows the builds quite a lot,
# because it builds the front-end also in all the jobs where it's not needed.
# Having to install bzip2 so that it can unzip everything it downloads (node, yarn, ...)
# makes it even slower (a custom docker build image would help with that).services:
# TODO: Use GitLab CI/CD caching of the downloaded/installed node/yarn?
# TODO: It looks like we don't need SpringSecurityAclModule anywhere, so we can probably just drop it.
before_script:
  - apt update
  - apt install bzip2

after_script:
  - rm -rf $MAVEN_REPO_DIR/com/foreach || echo "Nothing to delete" # Don't cache this

#curl:google:
#  script:
#    - curl --connect-timeout 10 https://www.google.com
#    - echo "Success Google"
#
#curl:nexus-foreach:
#  script:
#    - curl --connect-timeout 10 https://repository.foreach.be/nexus/repository/public/archetype-catalog.xml
#    - echo "Success Nexus Foreach"

#.frontend:
#  stage: test
#  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/node:10.15
#  script:
#    - cd ${FRONTEND_DIR}
#    - yarn install
#    - yarn build:prod
#
#frontend:spring-security-acl-module:
#  extends:
#    - .frontend
#  variables:
#    FRONTEND_DIR: spring-security-acl-module/src/main/frontend
#  artifacts:
#    paths:
#      - spring-security-acl-module/src/main/resources/views/static/SpringSecurityAclModule/
#
#frontend:entity-module:
#  extends:
#    - .frontend
#  variables:
#    FRONTEND_DIR: entity-module/src/main/frontend
#  artifacts:
#    paths:
#      - entity-module/src/main/resources/views/static/entity/


# For merge requests do not `deploy` but only run `verify`.
# See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
.verify:
  stage: test
  script:
    # - 'mvn $MAVEN_CLI_OPTS dependency:purge-local-repository -DmanualInclude=com.foreach -DreResolve=false'
    - find $CI_PROJECT_DIR/.m2/repository/com/foreach/ -type d -name "*-SNAPSHOT" | xargs rm -rf || echo "No snapshots to delete"
    - 'mvn $MAVEN_CLI_OPTS verify'
  artifacts:
    when: always
    reports:
      junit:
        - '**/target/surefire-reports/TEST-*.xml'
        - '**/target/failsafe-reports/TEST-*.xml'
#  except:
#    variables:
#      - $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

verify:jdk8:
  extends:
    - .verify
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/maven:3.8-eclipse-temurin-8

#verify:jdk11:
#  extends:
#    - .verify
#  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/maven:3.8-eclipse-temurin-11
#
#verify:jdk17:
#  extends:
#    - .verify
#  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/maven:3.8-eclipse-temurin-17
#
#verify:jdk21:
#  extends:
#    - .verify
#  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/maven:3.8-eclipse-temurin-21

# bootstrap-ui-module: end-to-end tests:
#  docker-compose --no-ansi -f across-bamboo-specs/docker-compose-ax-5.yml  run maven-jdk-8 mvn --batch-mode dependency:purge-local-repository -DmanualInclude=com.foreach.across -DreResolve=false -Dverbose=true
#  cp ${HOME}/.npmrc ${bamboo.working.directory}
#  docker-compose run --rm frontend sh -c 'yarn run build:prod'
#  docker-compose --no-ansi -f across-bamboo-specs/docker-compose-ax-5.yml  run maven-jdk-8 mvn clean package -U --batch-mode -Dmaven.test.skip=true -Dmaven.javadoc.skip=true -Dincoming.build.key=${bamboo.buildKey} -Dincoming.build.number=${bamboo.buildNumber} -Dincoming.build.date=${bamboo.buildTimeStamp}
#  docker-compose --no-ansi up -d --build web
#  docker-compose --no-ansi up --build test
# Roughly summarized, the end2end tests:
# - run bootstrap-ui-module-test.jar in a Java container (In theory, we could run this in a job service,
#   using the artifact published by the maven build, but we'd have to build and publish a docker image for that)
# - run Cypress in a cypress/browsers container, with the actual end-to-end tests

# entity-ui-module: end-to-end tests
#  cp ${HOME}/.npmrc ${bamboo.working.directory}
#  docker-compose run --rm frontend sh -c 'yarn run build:prod'
#  docker-compose --no-ansi -f across-bamboo-specs/docker-compose-ax-5.yml  run maven-jdk-8 mvn --batch-mode dependency:purge-local-repository -DmanualInclude=com.foreach.across -DreResolve=false -Dverbose=true
#  docker-compose --no-ansi -f across-bamboo-specs/docker-compose-ax-5.yml  run maven-jdk-8 mvn clean package -U -Dmaven.test.skip=true -Dmaven.javadoc.skip=true -Dincoming.build.key=${bamboo.buildKey} -Dincoming.build.number=${bamboo.buildNumber} -Dincoming.build.date=${bamboo.buildTimeStamp}
#  docker-compose --no-ansi up -d --build web
#  docker-compose --no-ansi up --build e2e
# This is more or less similar to bootstrap-ui-module (the docker-compose files have the same structure, but with quite a few differences)

# Easiest solution is probably to run the end-to-end tests in a job:
# - with a DinD service container
# - and 'image: docker' for the "job" container: this has docker-compose:
#   1. Run the application-under-test in a container
#   2. And the tests in another
# - Or: run the tests as the "job" container, and run (1) as a service container, using docker-compose

.itest:
  stage: test
  script:
    # - 'mvn $MAVEN_CLI_OPTS dependency:purge-local-repository -DmanualInclude=com.foreach -DreResolve=false'
    - find $CI_PROJECT_DIR/.m2/repository/com/foreach/ -type d -name "*-SNAPSHOT" | xargs rm -rf || echo "No snapshots to delete"
    - 'mvn $MAVEN_CLI_OPTS test-compile failsafe:integration-test failsafe:verify -DacrossTest.datasource="$ACROSS_TEST_DATASOURCE" -Dmaven.javadoc.skip=true'
  artifacts:
    when: always
    reports:
      junit:
        - '**/target/surefire-reports/TEST-*.xml'
        - '**/target/failsafe-reports/TEST-*.xml'

itest:h2:
  extends:
    - .itest
  variables:
    ACROSS_TEST_DATASOURCE: h2

itest:mssql:
  extends:
    - .itest
  variables:
    ACROSS_TEST_DATASOURCE: mssql
  services:
    - name: mcr.microsoft.com/mssql/server:2017-latest
      alias: 'mssql'
      variables:
        ACCEPT_EULA: Y
        MSSQL_SA_PASSWORD: across_tEst
        MSSQL_PID: Developer

itest:mysql:
  extends:
    - .itest
  variables:
    ACROSS_TEST_DATASOURCE: mysql
  services:
    - name: '${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/mysql:8.0'
      alias: mysql
      variables:
        MYSQL_ROOT_PASSWORD: ''
        MYSQL_DATABASE: axt
        MYSQL_USER: axt
        MYSQL_PASSWORD: across_test
        MYSQL_ALLOW_EMPTY_PASSWORD: 'true'

itest:oracle:
  extends:
    - .itest
  variables:
    ACROSS_TEST_DATASOURCE: oracle
  services:
    - name: '${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/gvenzl/oracle-xe:18.4.0-slim' # This what testcontainers 1.18.1 uses
      alias: 'oracle'
      variables:
        ORACLE_ALLOW_REMOTE: 'true'
        ORACLE_ENABLE_XDB: 'true'
        # IT IS SAID THAT THIS IS MORE PERFORMANT IN DOCKER
        ORACLE_DISABLE_ASYNCH_IO: 'true'
        ORACLE_PASSWORD: across_test
      # You cannot mount volumes in a service container, this is a workaround for that:
      # Solution inspired by: https://stackoverflow.com/questions/72201392/mounting-a-volume-for-a-gitlab-service
      # Doesn't work: the /docker-entrypoint-initdb.d directory doesn't exist in the image, and creating it gives:
      #   mkdir: cannot create directory '/docker-entrypoint-initdb.d/': Permission denied
      # However: /container-entrypoint-initdb.d does exist! See: https://github.com/gvenzl/oci-oracle-xe/issues/108
      # entrypoint: ['/bin/bash', "-c", 'echo "c" > /container-entrypoint-initdb.d/init.sql && container-entrypoint.sh']
      entrypoint:
        - '/bin/bash'
        - '-c'
        - |
          echo "$ORACLE_INIT_SQL" > /container-entrypoint-initdb.d/init.sql
          cat /container-entrypoint-initdb.d/*
          wc -l /container-entrypoint-initdb.d/*
          container-entrypoint.sh

itest:postgresql:
  extends:
    - .itest
  variables:
    ACROSS_TEST_DATASOURCE: postgres
  services:
    - name: '${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/postgres:14.8'
      alias: postgres
      variables:
        POSTGRES_DB: axt
        POSTGRES_USER: axt
        POSTGRES_PASSWORD: across_test

deploy:foreach:
  stage: deploy
  before_script:
    - apt update
    - apt -y install bzip2 gpg
    - gpg --pinentry-mode loopback --passphrase $ACROSS_GPG_PASSPHRASE --import $ACROSS_GPG_PRIVATE_KEY
    - gpg --list-keys
  script:
    - mvn $MAVEN_CLI_OPTS --settings ci_settings.xml -Pacross deploy -DskipTests
#  only:
#    variables:
#      - $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#

# TODO: on push of a tag, run a deploy to Sonatype
# Disadvantage is that that will run all integration tests again, unless we want disable those on a tag push
